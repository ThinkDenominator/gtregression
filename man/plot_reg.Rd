% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_reg.R
\name{plot_reg}
\alias{plot_reg}
\title{Visualize a Regression Model as a Forest Plot}
\usage{
plot_reg(
  tbl,
  title = NULL,
  ref_line = NULL,
  order_y = NULL,
  log_x = FALSE,
  xlim = NULL,
  breaks = NULL,
  point_color = "#1F77B4",
  errorbar_color = "#4C4C4C",
  base_size = 14,
  show_ref = TRUE,
  sig_color = "",
  sig_errorbar_color = ""
)
}
\arguments{
\item{tbl}{A gtsummary object from regression functions}

\item{title}{Optional plot title}

\item{ref_line}{Reference line; if NULL, uses 0 for linear and 1 otherwise}

\item{order_y}{Optional character vector to customise y-axis order}

\item{log_x}{Logical. If TRUE, log x-axis (ignored for linear)}

\item{xlim}{Optional numeric vector for x-axis limits}

\item{breaks}{Optional numeric vector for x-axis tick breaks}

\item{point_color}{Fill color for points (default "#1F77B4")}

\item{errorbar_color}{Color for all error bars (default "#4C4C4C")}

\item{base_size}{Base font size}

\item{show_ref}{Logical. If TRUE, includes reference in the plot}

\item{sig_color}{Optional fill color for significant points; if "" (default),
significance highlighting is disabled}

\item{sig_errorbar_color}{Optional color for significant error bars; if "" (default),
bars stay `errorbar_color`}
}
\value{
A `ggplot2` object representing the forest plot.
}
\description{
Creates a forest plot from a `gtsummary` object.
Supports both univariate and multivariable models
with hierarchical labels for categorical variables.
Designed to work seamlessly with outputs from
functions like `uni_reg()` and `multi_reg()`.
}
\examples{
\donttest{
if (requireNamespace("mlbench", quietly = TRUE)) {
  data("PimaIndiansDiabetes2", package = "mlbench")
  library(dplyr)
  library(gtregression)

  # Prepare data
  pima <- PimaIndiansDiabetes2 |>
    mutate(
      diabetes = ifelse(diabetes == "pos", 1, 0),
      bmi_cat = cut(
        mass,
        breaks = c(-Inf, 18.5, 24.9, 29.9, Inf),
        labels = c("Underweight", "Normal", "Overweight", "Obese")
      )
    )

  # Univariate logistic regression
  uni_rr <- uni_reg(
    data = pima,
    outcome = "diabetes",
    exposures = c("age", "bmi_cat"),
    approach = "logit"
  )
  plot_reg(uni_rr)
}
}
}
